import os
import asyncio
from telegram import Bot, Update
from datetime import datetime, timedelta
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import random

# –ö—ñ–Ω—Ü–µ–≤–∞ –¥–∞—Ç–∞: 14 –∫–≤—ñ—Ç–Ω—è 2025, 23:59:59
END_DATE = datetime(2025, 4, 14, 23, 59, 59)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Google Sheets API
SCOPE = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
CREDS_FILE = "credentials.json"
SPREADSHEET_URL = "https://docs.google.com/spreadsheets/d/1rVUe1wHurLiq9qNoUHy3FyTI3NXi78IlcpXA3IYlhOw/edit?gid=0#gid=0"

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Google Sheets
try:
    creds = ServiceAccountCredentials.from_json_keyfile_name(CREDS_FILE, SCOPE)
    client = gspread.authorize(creds)
    sheet = client.open_by_url(SPREADSHEET_URL).sheet1
except Exception as e:
    print(f"–ü–æ–º–∏–ª–∫–∞ Google Sheets: {e}")
    exit(1)

# –ó–º—ñ–Ω–Ω—ñ –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É
current_winner = None
last_draw_date = None
group_members = set()
ADMIN_USERNAME = "@Merser123"  # –í–∞—à —é–∑–µ—Ä–Ω–µ–π–º

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏ –≤ —Ç–∞–±–ª–∏—Ü—é
def add_expense_to_sheet(amount, sponsor, comment):
    try:
        amount_value = float(amount.strip())
    except ValueError:
        return "–ü–æ–º–∏–ª–∫–∞: —Å—É–º–∞ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '200')"
    
    current_date = datetime.now().strftime("%d.%m.%Y")
    next_row = len(sheet.get_all_values()) + 1
    sheet.update([[current_date, sponsor, amount_value, comment]], f"A{next_row}:D{next_row}")
    return f"–î–æ–¥–∞–Ω–æ: {current_date}, {sponsor}, {amount_value} –≥—Ä–Ω, {comment}"

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É
async def conduct_draw(bot, chat_id):
    global current_winner, last_draw_date, group_members
    if group_members:
        current_winner = random.choice(list(group_members))
        last_draw_date = datetime.now()
        await bot.send_message(
            chat_id=chat_id,
            text=f"–ü—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è —Ä–æ–∑—ñ–≥—Ä–∞—à –ª–æ–∫–∞–ª—å–Ω–æ—ó –≤–∞—Ö—Ç–∏ –ø—ñ–¥–∞—Ä–∞...\n–°—å–æ–≥–æ–¥–Ω—ñ –Ω–∞ –≤–∞—Ö—Ç—ñ –±—É–¥–µ @{current_winner}!"
        )
    else:
        await bot.send_message(chat_id=chat_id, text="–ù–µ–º–∞—î —É—á–∞—Å–Ω–∏–∫—ñ–≤ –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É! –î–æ–¥–∞–π —ó—Ö —á–µ—Ä–µ–∑ /addmember")

# –©–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à –æ 9:00
async def schedule_draw(bot, chat_id):
    while True:
        now = datetime.now()
        if now.hour == 9 and now.minute == 0 and (last_draw_date is None or last_draw_date.date() != now.date()):
            await conduct_draw(bot, chat_id)
            await asyncio.sleep(60)  # –ß–µ–∫–∞—î–º–æ —Ö–≤–∏–ª–∏–Ω—É, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–≤—Ç–æ—Ä—ñ–≤
        else:
            await asyncio.sleep(60)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ—Ö–≤–∏–ª–∏–Ω–∏

# –û–±—Ä–æ–±–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω—å
async def handle_updates(bot):
    global group_members, current_winner
    offset = None
    
    while True:
        try:
            updates = await bot.get_updates(offset=offset, timeout=30)
            print(f"–û—Ç—Ä–∏–º–∞–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω—å: {len(updates)}")  # –í—ñ–¥–ª–∞–¥–∫–∞
            for update in updates:
                print(f"–û–Ω–æ–≤–ª–µ–Ω–Ω—è: {update}")  # –í—ñ–¥–ª–∞–¥–∫–∞
                if update.message and update.message.text:
                    text = update.message.text.strip()
                    chat_id = update.message.chat_id
                    user = update.message.from_user.username or update.message.from_user.first_name
                    print(f"Chat ID: {chat_id}, –¢–µ–∫—Å—Ç: {text}")  # –í—ñ–¥–ª–∞–¥–∫–∞

                    # –î–æ–¥–∞—î–º–æ —É—á–∞—Å–Ω–∏–∫–∞ –∑ –∫–æ–∂–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    group_members.add(user)

                    # –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ "–©–æ —Ç–∞–º –ø–æ —á–∞—Å—É"
                    if text == "–©–æ —Ç–∞–º –ø–æ —á–∞—Å—É":
                        now = datetime.now()
                        delta = END_DATE - now
                        if delta.total_seconds() <= 0:
                            await bot.send_message(chat_id=chat_id, text="<b>‚è∞ –ß–∞—Å –≤–∏–π—à–æ–≤!</b>\n–†—É–∫–∏ –Ω–∞ —Å—Ç—ñ–ª! üñêÔ∏è", parse_mode="HTML")
                        else:
                            days, seconds = delta.days, delta.seconds
                            hours = seconds // 3600
                            minutes = (seconds % 3600) // 60
                            seconds = seconds % 60
                            await bot.send_message(
                                chat_id=chat_id,
                                text=(
                                    "<b>‚è≥ –î–æ –ø—Ä–∏–π–Ω—è—Ç—Ç—è —Ä—ñ—à–µ–Ω–Ω—è –∑–∞–ª–∏—à–∏–ª–æ—Å—å:</b>\n"
                                    f"<code>{days}</code> <i>–¥–Ω—ñ–≤</i> üåû\n"
                                    f"<code>{hours}</code> <i>–≥–æ–¥–∏–Ω</i> ‚è∞\n"
                                    f"<code>{minutes}</code> <i>—Ö–≤–∏–ª–∏–Ω</i> ‚è±Ô∏è\n"
                                    f"<code>{seconds}</code> <i>—Å–µ–∫—É–Ω–¥</i> ‚ö°"
                                ),
                                parse_mode="HTML"
                            )

                    # –û–±—Ä–æ–±–∫–∞ –≤–∏—Ç—Ä–∞—Ç
                    elif text.startswith("–í–∏—Ç—Ä–∞—Ç–∞:"):
                        try:
                            parts = text.replace("–í–∏—Ç—Ä–∞—Ç–∞:", "").strip().split(", ")
                            if len(parts) == 2:
                                amount, comment = parts
                                sponsor = f"@{user}" if user.startswith("@") else user
                                result = add_expense_to_sheet(amount, sponsor, comment)
                                await bot.send_message(chat_id=chat_id, text=result)
                            else:
                                await bot.send_message(chat_id=chat_id, text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π: –í–∏—Ç—Ä–∞—Ç–∞: —Å—É–º–∞, –∫–æ–º–µ–Ω—Ç–∞—Ä (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '200, –∫–∞–≤–∞')")
                        except Exception as e:
                            await bot.send_message(chat_id=chat_id, text=f"–ü–æ–º–∏–ª–∫–∞: {e}")

                    # –û–±—Ä–æ–±–∫–∞ –ø–∏—Ç–∞–Ω–Ω—è "–•—Ç–æ –Ω–∞ –≤–∞—Ö—Ç—ñ?"
                    elif text.lower() == "—Ö—Ç–æ –Ω–∞ –≤–∞—Ö—Ç—ñ?":
                        if current_winner:
                            await bot.send_message(chat_id=chat_id, text=f"@{current_winner} –ø—ñ–¥–∞—Ä")
                        else:
                            await bot.send_message(chat_id=chat_id, text="–°—å–æ–≥–æ–¥–Ω—ñ —â–µ –Ω—ñ–∫–æ–≥–æ –Ω–µ –æ–±—Ä–∞–ª–∏. –ß–µ–∫–∞–π 9:00 –∞–±–æ –ø–æ–ø—Ä–æ—Å–∏ –∞–¥–º—ñ–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à!")

                    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞)
                    elif text == "/draw" and user == ADMIN_USERNAME:
                        await conduct_draw(bot, chat_id)

                    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —É—á–∞—Å–Ω–∏–∫–∞ –≤—Ä—É—á–Ω—É (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞)
                    elif text.startswith("/addmember") and user == ADMIN_USERNAME:
                        try:
                            new_member = text.split(" ", 1)[1].strip()
                            group_members.add(new_member)
                            await bot.send_message(chat_id=chat_id, text=f"–î–æ–¥–∞–Ω–æ —É—á–∞—Å–Ω–∏–∫–∞: {new_member}")
                        except IndexError:
                            await bot.send_message(chat_id=chat_id, text="–í–∫–∞–∂–∏ —ñ–º'—è –∞–±–æ @—é–∑–µ—Ä–Ω–µ–π–º –ø—ñ—Å–ª—è /addmember")

                offset = update.update_id + 1

        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞: {e}")
            await asyncio.sleep(5)

async def main():
    token = os.getenv("BOT_TOKEN")
    if not token:
        print("–ü–æ–º–∏–ª–∫–∞: BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∏–π!")
        return
    bot = Bot(token=token)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π!")
    
    # –û—Ç—Ä–∏–º—É—î–º–æ chat_id –ø–µ—Ä—à–æ—ó –≥—Ä—É–ø–∏, –¥–µ –±–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π, –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É
    updates = await bot.get_updates(timeout=10)
    chat_id = updates[0].message.chat_id if updates else None
    
    if chat_id:
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ–±—Ä–æ–±–∫—É –æ–Ω–æ–≤–ª–µ–Ω—å —ñ —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
        await asyncio.gather(
            handle_updates(bot),
            schedule_draw(bot, chat_id)
        )
    else:
        print("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ chat_id. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –±–æ—Ç –¥–æ–¥–∞–Ω–∏–π –¥–æ –≥—Ä—É–ø–∏!")
        await handle_updates(bot)  # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –æ–±—Ä–æ–±–∫—É –æ–Ω–æ–≤–ª–µ–Ω—å

if __name__ == "__main__":
    asyncio.run(main())
