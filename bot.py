import os
import asyncio
from telegram import Bot, Update
from datetime import datetime, timedelta
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import random

# –ö—ñ–Ω—Ü–µ–≤–∞ –¥–∞—Ç–∞: 14 –∫–≤—ñ—Ç–Ω—è 2025, 23:59:59
END_DATE = datetime(2025, 4, 14, 23, 59, 59)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Google Sheets API
SCOPE = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
CREDS_FILE = "credentials.json"
SPREADSHEET_URL = "https://docs.google.com/spreadsheets/d/1rVUe1wHurLiq9qNoUHy3FyTI3NXi78IlcpXA3IYlhOw/edit?gid=0#gid=0"

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Google Sheets
creds = ServiceAccountCredentials.from_json_keyfile_name(CREDS_FILE, SCOPE)
client = gspread.authorize(creds)
sheet = client.open_by_url(SPREADSHEET_URL).sheet1

# –ó–º—ñ–Ω–Ω—ñ –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É
current_winner = None
last_draw_date = None
group_members = set()
ADMIN_USERNAME = "–¢–≤—ñ–π–Æ–∑–µ—Ä–Ω–µ–π–º"  # –ó–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π Telegram-—é–∑–µ—Ä–Ω–µ–π–º, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "@Sanya123"

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏ –≤ —Ç–∞–±–ª–∏—Ü—é
def add_expense_to_sheet(amount, sponsor, comment):
    try:
        amount_value = float(amount.strip())
    except ValueError:
        return "–ü–æ–º–∏–ª–∫–∞: —Å—É–º–∞ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '200')"
    
    current_date = datetime.now().strftime("%d.%m.%Y")
    next_row = len(sheet.get_all_values()) + 1
    sheet.update([[current_date, sponsor, amount_value, comment]], f"A{next_row}:D{next_row}")
    return f"–î–æ–¥–∞–Ω–æ: {current_date}, {sponsor}, {amount_value} –≥—Ä–Ω, {comment}"

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤ –≥—Ä—É–ø–∏
async def update_group_members(bot, chat_id):
    global group_members
    try:
        chat_members = await bot.get_chat_members(chat_id=chat_id)
        group_members.clear()
        for member in chat_members:
            if not member.user.is_bot:  # –í–∏–∫–ª—é—á–∞—î–º–æ –±–æ—Ç—ñ–≤
                username = member.user.username or member.user.first_name
                group_members.add(username)
        print(f"–û–Ω–æ–≤–ª–µ–Ω–æ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å–Ω–∏–∫—ñ–≤: {len(group_members)}")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —É—á–∞—Å–Ω–∏–∫—ñ–≤: {e}")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É
async def conduct_draw(bot, chat_id):
    global current_winner, last_draw_date, group_members
    if group_members:
        current_winner = random.choice(list(group_members))
        last_draw_date = datetime.now()
        await bot.send_message(
            chat_id=chat_id,
            text=f"–ü—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è —Ä–æ–∑—ñ–≥—Ä–∞—à –ª–æ–∫–∞–ª—å–Ω–æ—ó –≤–∞—Ö—Ç–∏ –ø—ñ–¥–∞—Ä–∞...\n–°—å–æ–≥–æ–¥–Ω—ñ –Ω–∞ –≤–∞—Ö—Ç—ñ –±—É–¥–µ @{current_winner}!"
        )
    else:
        await bot.send_message(chat_id=chat_id, text="–ù–µ–º–∞—î —É—á–∞—Å–Ω–∏–∫—ñ–≤ –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É!")

# –©–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à –æ 9:00
async def schedule_draw(bot, chat_id):
    while True:
        now = datetime.now()
        if now.hour == 9 and now.minute == 0:
            await conduct_draw(bot, chat_id)
            await asyncio.sleep(60)  # –ß–µ–∫–∞—î–º–æ —Ö–≤–∏–ª–∏–Ω—É, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–≤—Ç–æ—Ä—ñ–≤
        else:
            seconds_to_next_minute = 60 - now.second
            await asyncio.sleep(seconds_to_next_minute)

async def handle_updates(bot):
    global group_members, current_winner
    offset = None
    chat_id = None
    
    while True:
        try:
            updates = await bot.get_updates(offset=offset, timeout=30)
            for update in updates:
                if update.message and update.message.text:
                    text = update.message.text.strip()
                    chat_id = update.message.chat_id if chat_id is None else chat_id
                    user = update.message.from_user.username or update.message.from_user.first_name

                    # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ
                    if not group_members:
                        await update_group_members(bot, chat_id)

                    # –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ "–©–æ —Ç–∞–º –ø–æ —á–∞—Å—É"
                    if text == "–©–æ —Ç–∞–º –ø–æ —á–∞—Å—É":
                        now = datetime.now()
                        delta = END_DATE - now
                        if delta.total_seconds() <= 0:
                            await bot.send_message(chat_id=chat_id, text="<b>‚è∞ –ß–∞—Å –≤–∏–π—à–æ–≤!</b>\n–†—É–∫–∏ –Ω–∞ —Å—Ç—ñ–ª! üñêÔ∏è", parse_mode="HTML")
                        else:
                            days, seconds = delta.days, delta.seconds
                            hours = seconds // 3600
                            minutes = (seconds % 3600) // 60
                            seconds = seconds % 60
                            await bot.send_message(
                                chat_id=chat_id,
                                text=(
                                    "<b>‚è≥ –î–æ –ø—Ä–∏–π–Ω—è—Ç—Ç—è —Ä—ñ—à–µ–Ω–Ω—è –∑–∞–ª–∏—à–∏–ª–æ—Å—å:</b>\n"
                                    f"<code>{days}</code> <i>–¥–Ω—ñ–≤</i> üåû\n"
                                    f"<code>{hours}</code> <i>–≥–æ–¥–∏–Ω</i> ‚è∞\n"
                                    f"<code>{minutes}</code> <i>—Ö–≤–∏–ª–∏–Ω</i> ‚è±Ô∏è\n"
                                    f"<code>{seconds}</code> <i>—Å–µ–∫—É–Ω–¥</i> ‚ö°"
                                ),
                                parse_mode="HTML"
                            )

                    # –û–±—Ä–æ–±–∫–∞ –≤–∏—Ç—Ä–∞—Ç
                    elif text.startswith("–í–∏—Ç—Ä–∞—Ç–∞:"):
                        try:
                            parts = text.replace("–í–∏—Ç—Ä–∞—Ç–∞:", "").strip().split(", ")
                            if len(parts) == 2:
                                amount, comment = parts
                                sponsor = f"@{user}" if user.startswith("@") else user
                                result = add_expense_to_sheet(amount, sponsor, comment)
                                await bot.send_message(chat_id=chat_id, text=result)
                            else:
                                await bot.send_message(chat_id=chat_id, text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π: –í–∏—Ç—Ä–∞—Ç–∞: —Å—É–º–∞, –∫–æ–º–µ–Ω—Ç–∞—Ä (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '200, –∫–∞–≤–∞')")
                        except Exception as e:
                            await bot.send_message(chat_id=chat_id, text=f"–ü–æ–º–∏–ª–∫–∞: {e}")

                    # –û–±—Ä–æ–±–∫–∞ –ø–∏—Ç–∞–Ω–Ω—è "–•—Ç–æ –Ω–∞ –≤–∞—Ö—Ç—ñ?"
                    elif text.lower() == "—Ö—Ç–æ –Ω–∞ –≤–∞—Ö—Ç—ñ?":
                        if current_winner:
                            await bot.send_message(chat_id=chat_id, text=f"@{current_winner} –ø—ñ–¥–∞—Ä")
                        else:
                            await bot.send_message(chat_id=chat_id, text="–°—å–æ–≥–æ–¥–Ω—ñ —â–µ –Ω—ñ–∫–æ–≥–æ –Ω–µ –æ–±—Ä–∞–ª–∏. –ß–µ–∫–∞–π 9:00 –∞–±–æ –ø–æ–ø—Ä–æ—Å–∏ –∞–¥–º—ñ–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à!")

                    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞)
                    elif text == "/draw" and user == ADMIN_USERNAME:
                        await conduct_draw(bot, chat_id)

                offset = update.update_id + 1
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à, —è–∫—â–æ chat_id –≤—ñ–¥–æ–º–∏–π
            if chat_id and not hasattr(bot, 'draw_scheduled'):
                asyncio.create_task(schedule_draw(bot, chat_id))
                bot.draw_scheduled = True

        except Exception as e:
            print(f"Error: {e}")
            await asyncio.sleep(5)

async def main():
    bot = Bot(token=os.getenv("BOT_TOKEN"))
    print("Bot started!")
    await handle_updates(bot)

if __name__ == "__main__":
    asyncio.run(main())
