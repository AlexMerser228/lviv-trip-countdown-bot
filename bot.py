import os
import asyncio
from datetime import datetime, timedelta
import gspread
from google.oauth2.service_account import Credentials
import json
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ö—ñ–Ω—Ü–µ–≤–∞ –¥–∞—Ç–∞: 14 –∫–≤—ñ—Ç–Ω—è 2025, 23:59:59
END_DATE = datetime(2025, 4, 14, 23, 59, 59)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Google Sheets API
SCOPE = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
SPREADSHEET_URL = "https://docs.google.com/spreadsheets/d/1rVUe1wHurLiq9qNoUHy3FyTI3NXi78IlcpXA3IYlhOw/edit?gid=0#gid=0"

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Google Sheets
try:
    # –û—Ç—Ä–∏–º—É—î–º–æ credentials.json —ñ–∑ –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    creds_json = os.getenv("GOOGLE_CREDENTIALS")
    if not creds_json:
        raise Exception("GOOGLE_CREDENTIALS –Ω–µ –∑–∞–¥–∞–Ω–∏–π —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")
    creds_dict = json.loads(creds_json)
    creds = Credentials.from_service_account_info(creds_dict, scopes=SCOPE)
    client = gspread.authorize(creds)
    sheet = client.open_by_url(SPREADSHEET_URL).sheet1
except Exception as e:
    print(f"–ü–æ–º–∏–ª–∫–∞ Google Sheets: {e}")
    exit(1)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏ –≤ —Ç–∞–±–ª–∏—Ü—é
def add_expense_to_sheet(amount, sponsor, comment):
    try:
        amount_value = float(amount.strip())
    except ValueError:
        return "–ü–æ–º–∏–ª–∫–∞: —Å—É–º–∞ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '200')"
    
    current_date = datetime.now().strftime("%d.%m.%Y")
    next_row = len(sheet.get_all_values()) + 1
    sheet.update([[current_date, sponsor, amount_value, comment]], f"A{next_row}:D{next_row}")
    return f"–î–æ–¥–∞–Ω–æ: {current_date}, {sponsor}, {amount_value} –≥—Ä–Ω, {comment}"

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ "–©–æ —Ç–∞–º –ø–æ —á–∞—Å—É"
async def time_left(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        now = datetime.now()
        delta = END_DATE - now
        if delta.total_seconds() <= 0:
            await update.message.reply_text("<b>‚è∞ –ß–∞—Å –≤–∏–π—à–æ–≤!</b>\n–†—É–∫–∏ –Ω–∞ —Å—Ç—ñ–ª! üñêÔ∏è", parse_mode="HTML")
        else:
            days, seconds = delta.days, delta.seconds
            hours = seconds // 3600
            minutes = (seconds % 3600) // 60
            seconds = seconds % 60
            await update.message.reply_text(
                "<b>‚è≥ –î–æ –ø—Ä–∏–π–Ω—è—Ç—Ç—è —Ä—ñ—à–µ–Ω–Ω—è –∑–∞–ª–∏—à–∏–ª–æ—Å—å:</b>\n"
                f"<code>{days}</code> <i>–¥–Ω—ñ–≤</i> üåû\n"
                f"<code>{hours}</code> <i>–≥–æ–¥–∏–Ω</i> ‚è∞\n"
                f"<code>{minutes}</code> <i>—Ö–≤–∏–ª–∏–Ω</i> ‚è±Ô∏è\n"
                f"<code>{seconds}</code> <i>—Å–µ–∫—É–Ω–¥</i> ‚ö°",
                parse_mode="HTML"
            )
    except Exception as e:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—á–∏—Å–ª–µ–Ω–Ω—ñ —á–∞—Å—É: {e}")

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤–∏—Ç—Ä–∞—Ç
async def handle_expense(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text.strip()
    if not text.startswith("–í–∏—Ç—Ä–∞—Ç–∞:"):
        return

    try:
        parts = text.replace("–í–∏—Ç—Ä–∞—Ç–∞:", "").strip().split(", ")
        if len(parts) == 2:
            amount, comment = parts
            user = update.message.from_user.username or update.message.from_user.first_name
            sponsor = f"@{user}" if user.startswith("@") else user
            result = add_expense_to_sheet(amount, sponsor, comment)
            await update.message.reply_text(result)
        else:
            await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π: –í–∏—Ç—Ä–∞—Ç–∞: —Å—É–º–∞, –∫–æ–º–µ–Ω—Ç–∞—Ä (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '200, –∫–∞–≤–∞')")
    except Exception as e:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {e}")

def main() -> None:
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω —ñ–∑ –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    token = os.getenv("BOT_TOKEN")
    if not token:
        print("–ü–æ–º–∏–ª–∫–∞: BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∏–π!")
        return

    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–æ–∫
    application = Application.builder().token(token).build()

    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
    application.add_handler(CommandHandler("time", time_left))  # –ö–æ–º–∞–Ω–¥–∞ /time –¥–ª—è "–©–æ —Ç–∞–º –ø–æ —á–∞—Å—É"
    application.add_handler(MessageHandler(filters.Regex(r'^–©–æ —Ç–∞–º –ø–æ —á–∞—Å—É$'), time_left))
    application.add_handler(MessageHandler(filters.Regex(r'^–í–∏—Ç—Ä–∞—Ç–∞:'), handle_expense))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π!")

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
